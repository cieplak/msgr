#!/usr/bin/env python
import logging
import signal
import threading
import time

import click
try:
    from gevent import monkey
except ImportError:
    monkey = None
import IPython

from msgr.engines import Engine


logger = logging.getLogger(__name__)


@main.group()
def msg():
    pass


class Worker(threading.Thread):

    daemon = True

    consumer_cls = Engine.Consumer

    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = None

    def stop(self):
        if self.consumer:
            self.consumer.should_stop = True

    def run(self):
        self.consumer = self.consumer_cls()
        self.consumer.run()
        self.consumer = None


class Supervisor(object):

    poll_frequency = 1.0

    teardown_period = 10.0

    def __init__(self, concurrency):
        self.workers = [Worker() for _ in xrange(concurrency)]

    def start(self):
        for worker in self.workers:
            worker.start()

    def stop(self):
        for worker in self.workers:
            worker.stop()

    def join(self):
        start = time.time()
        while self.workers:
            time.sleep(self.poll_frequency)
            self.reap()
            if time.time() - start > self.teardown_period:
                break

    def reap(self):
        self.workers = filter(lambda worker: worker.isAlive(), self.workers)


@main.command()
@click.option('--concurrency', default=0, help='Number of worker processes')
def consume(concurrency):
    if concurrency:
        if not monkey:
            raise Exception('gevent required if you want concurrency')
        monkey.patch_all()
        supervisor = Supervisor(concurrency)

        def shutdown(signum, frame):
            supervisor.stop()

        signal.signal(signal.SIGTERM, shutdown)

        try:
            supervisor.start()
            while supervisor.workers:
                time.sleep(supervisor.poll_frequency)
                supervisor.reap()
        finally:
            supervisor.stop()
            supervisor.join()
    else:
        consumer = Engine.Consumer()

        def shutdown(signum, frame):
            consumer.should_stop = True

        signal.signal(signal.SIGTERM, shutdown)
        consumer.run()


@main.command('shell')
def shell():
    namespace = {}
    return IPython.embed(user_ns=namespace)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass